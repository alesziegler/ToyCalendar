from datetime import date, datetime, timedelta
from file_manipulation import FileManipulation
from list_manipulation import ListManipulation

start_date = date(2024, 1, 1)
end_date = date(2024, 12, 31)
delta = end_date - start_date

# in this, list being comprehrended appears to be just list of numbers from 1 to 365 or 366.
# Operation consists in setting default date to appear in a new list and then adding to it
# number of days specified by an item in a list being comprehended.
# No names thus appear in a new list:
calendar = [(start_date + timedelta(days=item+1)).strftime("%d %B") for item in range(delta.days)]

#print(calendar)

"""
for i in range(delta.days):
  # in function, this maybe needs a list comprehension?
  print( (start_date + timedelta(days=i+1)).strftime("%d %B") )

"""
test_list = ["hdash","cjpsjc","jfdojd,sdsdds"]

test_list_manip = ListManipulation(test_list)

deepened_test_list = test_list_manip.split_item_if_it_contains_given_separator_into_lower_level_list(",")

print(deepened_test_list)


svatky_file_manip = FileManipulation("svatky.txt")

names = svatky_file_manip.delete_empty_lines()

list_manip = ListManipulation(names)

more_names_in_one_day_handling = list_manip.split_item_if_it_contains_given_separator_into_lower_level_list(",")

days_with_more_names = []
names_ascribed_to_days_with_more_names = []

for item in more_names_in_one_day_handling:
  if type(item) is list:
     #ad item index to days_with_more_names
     days_with_more_names.append(more_names_in_one_day_handling.index(item))
     for name in item:
        names_ascribed_to_days_with_more_names.append(name)
     
    

#ok, lets do it differently - here we use matching indexes of our two lists

current_day = datetime.now().date().strftime("%d %B")

#print(current_day)

matching_index = calendar.index(current_day)

#print(matching_index)

current_name = names[matching_index+1]

print(f"Dnes ma svatek: {current_name}")



name = input("Zadejte sve jmeno: ")

try:
    #print(name)
    # if 
    matching_index = names.index(name.strip() + "\n")
    #somewhere here should be a if type list, do operation on a list
    #NO. Matching indexes for list-names should be stored in a special place somewhere
    print("try")
except Exception as e:
    # try finding it in a special place where list-names are,
    #print(e)
    try:
       for index in days_with_more_names:
          pass
    except:
      pass
    print("Toto jméno není v kalendáři")

my_date = calendar[matching_index - 1]

print(f"Svatek mate {my_date}")

print(names[55])

print(names.index("Liliana\n"))

"""
Ok, we need something like if datetime.now().date() converted to an appropriate format
equals value in a dictionary, print keys?

Ok, we need a method that copies file and deletes empty lines from it.
Next, what?
We need to combine result of that method applied to our file, with 
calendar generated by other method.
Then we need way to retrieve data from this combination in a right way
"""

